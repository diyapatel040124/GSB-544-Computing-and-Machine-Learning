---
title: "Lab 1: Gapminder Data Visualization"
author: "Diya Patel"
format: 
    html:
        toc: true
        code-fold: true 
        embed-resources: true
echo: true
---

Task 1 - 2010 dataset 

Part 1: In the plot of the Gapminder visualization, we can see that the aesthetics being used are in the colors green, blue, red, and yellow. Each color corresponds to a specific continent of the world. They are plotted based on the level of income and it's corresponding life expectancy based on the level of income for that country. Each country has a bubble of its own and its size is relative to its GDP per capita. The variables being analyzed are Income (independent variable) and Life Expectancy (dependent variable).

Part 2: Importing the dataset

```{python}
import pandas as pd

df = pd.read_csv("/Users/diyapatel/Desktop/GSB544_Lab1/q1data.csv")
df_1 = df.dropna()

df_1
```
```{python}
#3 Recreate the plot using plotnine
import plotnine as p9
from plotnine import ggplot, geom_point, aes, geom_boxplot

#Bind the plot to a specific data frame using the data argument
(p9.ggplot(data=df_1))
```
```{python}
#Define aesthetics (aes), by selecting variables used in the plot and mapping them to a presentation such as plotting size, shape, color, etc.
#Which of the variables will influence the plotted objects/geometries 

(p9.ggplot(data=df_1,
           mapping=p9.aes(x='income', y='life_exp')))
```
```{python}
#Still no specific data is plotted, as we have to define what kind of geometry will be used for the plot
#We must use points. Points is one of the geoms options, the graphical representation of the data in the plot

(p9.ggplot(data=df_1,
           mapping=p9.aes(x='income', y='life_exp'))
    + p9.geom_point()
)
```

Part 3: Recreate the plot using geom_point
```{python}
#Apply log transformation to achieve a linear graph
#Apply color aesthetics to correspond to the four_regions (continent of the countries)
#Apply a scale size so that each country is able to represent the population 

import plotnine as p9
# Subsetting for 2010
df_1_2010 = df_1[(df_1['year'] == 2010)]

#Define the colors
#Used the colordrop feature in Google Docs to find the exact hue of the bubble plot
four_region_colors = {
    "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
x_labels  = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"]
y_breaks = [20, 30, 40, 50, 60, 70, 80, 90]
y_labels = ["20", "30", "40", "50", "60", "70", "80", "90"]

(p9.ggplot(data=df_1_2010, #Gather data from only year 2010
           mapping=p9.aes(x='income', y='life_exp',
                          fill='four_regions', size= "population"))
+ p9.geom_point(shape='o', color='black', stroke=.20) 
#Outline the bubbles with black to define the circles better
+ p9.scale_size_area(max_size=18, guide='legend') 
#Define the bubble sizes to emphasize the country with the largest population
+ p9.scale_fill_manual(values=four_region_colors)
+ p9.scale_x_continuous(trans='log10', limits=(400, 70000), breaks=x_breaks, labels=x_labels) 
#Apply a log transformation to the x scale. The ticks are doubling so it needs to be log transformation
+ p9.scale_y_continuous(limits=(20, 90), breaks=y_breaks, labels=y_labels)
+ p9.theme(figure_size=(9,6)) 
#Stretch the graph so more data points can show up
+ p9.annotate(geom='text', x=5000, y=55, label='2010', size=90, alpha=0.2, color='gray') 
#Annotate the labeling on the screenshots 
+ p9.xlab("Income")
+ p9.ylab("Life Expectancy")
#Label the x and y axes
)
```

Part 4: When using another geometry like geom_boxplot, we notice that in comparison to geom_point the size of the population is not represented in the visualization. It is difficult to understand what are the sizes of the countries population since only the continents are being visualized in the boxplots. The bubble graph is the most ideal visualization to use to assess Life Expectancy based on Income because you are able to see by region and by country. The bubble chart also makes it easy to interpret with the sizes of the bubbles so you can see how large a country's income was and it's life expectancy based on their income for the year 2010. 
```{python}
# 4 - Using geom_boxplot to provide an actual plot of another geometry being used 
import plotnine as p9


#Define the colors
four_region_colors = {
     "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
x_labels  = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"]
y_breaks = [20, 30, 40, 50, 60, 70, 80, 90]
y_labels = ["20", "30", "40", "50", "60", "70", "80", "90"]

#Change geometry to boxplot
(p9.ggplot(data=df_1,
           mapping=p9.aes(x='income', y='life_exp',
                          color='four_regions', size= "population"))
+ p9.geom_boxplot()
+ p9.scale_color_manual(values=four_region_colors)
+ p9.scale_x_continuous(trans='log10', limits=(400, 70000), breaks=x_breaks, labels=x_labels)
+ p9.scale_y_continuous(limits=(20, 90), breaks=y_breaks, labels=y_labels)
+ p9.xlab("Income")
+ p9.ylab("Life Expectancy")
)
```

Task 2 - 1997 dataset 

Part 1: This visualization how the percentage of Exports (x-axis) effects the percentage of Imports. The size of each of the bubble represents energy usage and the color aesthetic of each of the bubble represent one of the four regions. Each individual bubble itself represents a country with how given its energy usage effects the percentage of imports.

Part 2: Import the dataset
```{python}
#Import the dataset
import pandas as pd

df_2 = pd.read_csv("/Users/diyapatel/Desktop/GSB544_Lab1/q2data.csv")
# df_2 = df_02.dropna()
```
```{python}
#Untransformed graph 
(p9.ggplot(data=df_2,
           mapping=p9.aes(x='exports', y='imports'))
    + p9.geom_point()
)
```

Part 3: Recreate the plot
```{python}
#Apply log transformation to achieve a linear graph
#Apply color aesthetics to correspond to the four_regions (continent of the countries)
#Apply a scale size so that each country is able to represent the population 

import plotnine as p9
#Only gather data for the year 1997
df_2_1997 = df_2[(df_2['year'] == 1997) & df_2['four_regions'].notna()]
df_2_1997 = df_2_1997.dropna()

df_2_1997['energy'] = pd.to_numeric(df_2['energy'], errors='coerce')
#Define the colors
four_region_colors = {
     "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220]
x_labels  = ['20', '40', '60', '80', '100', '120', '140', '160', '180', '200', '220']
y_breaks = [50, 100, 150, 200, 250, 300, 350, 400]
y_labels = ['50', '100', '150', '200', '250', '300', '350', '400']

#Change the bubble size to have the regions be representative of the energy variable 
(p9.ggplot(data=df_2_1997,
           mapping=p9.aes(x='exports', y='imports',
                          fill='four_regions', size= 'energy'))
+ p9.geom_point(shape='o', color='black', stroke=.20)
+ p9.scale_size_area(max_size=15, guide='legend')
+ p9.scale_fill_manual(values=four_region_colors)
+ p9.scale_x_continuous(limits=(20, 230), breaks=x_breaks, labels=x_labels)
+ p9.scale_y_continuous(limits=(50, 425), breaks=y_breaks, labels=y_labels)
+ p9.annotate(geom='text', x=125, y=200, label='1997', size=90, alpha=0.2, color='gray')
+ p9.xlab("Exports ('\%' of GDP)")
+ p9.ylab("Imports ('\%' of GDP)")
)
```

Part 4: Recreate using another plot 
Part 1: When using a new geometry like a histogram, the plot can be useful to clearly show the distrubution of income across the four regions with a bin width of 10. This is easier to compare the ranges of income and to see which of the regions dominate at low vs. high income levels and which countries fall into different income brackets. The goal is to understand the relationships among exports and imports given the energy usage so the bubble plot is more preferred, but the histogram does help to compare income distributions across the four regions.

```{python}
#Recreate using another plot (histogram)

import plotnine as p9
from plotnine import geom_histogram
#Define the colors
four_region_colors = {
     "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
x_labels  = ["500", "1000", "2000", "4000", "8000", "16k", "32k", "64k"]

#Change the geometry to a histogram
(p9.ggplot(data=df_1,
           mapping=p9.aes(x='income',
                           fill='four_regions'))
+ p9.geom_histogram(bins = 30)
+ p9.scale_fill_manual(values=four_region_colors)
+ p9.scale_x_continuous(trans='log10', limits=(400, 70000), breaks=x_breaks, labels=x_labels)
+ p9.xlab("Income")
+ p9.ylab("count")
)
```

Task 3 - 2001 dataset 
The bubble plot has the x-axis representing the percentage of individuals that are internet users and the y-axis showing GDP per capita. The size of the bubbles is mapped to a country's income level and the color of the bubbles represents the 4 regions. The bubbles each corresponds to a country in the year 2001. 

Part 2 - Import the dataset
```{python}
# Import the q3 dataset

df_03 = pd.read_csv("/Users/diyapatel/Desktop/GSB544_Lab1/q3data.csv")
df_3 = df_03.dropna()

df_3
```
```{python}
#Untransformed graph 
(p9.ggplot(data=df_3,
           mapping=p9.aes(x='internet_users', y='gdp'))
    + p9.geom_point()
)
```

Part 3: Recreate the plot 
```{python}
#Apply log transformation to achieve a linear graph
#Apply color aesthetics to correspond to the four_regions (continent of the countries)
#Apply a scale size so that each country is able to represent the population 

import plotnine as p9

#Define the colors
four_region_colors = {
     "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [10, 20, 30, 40, 50, 60, 70, 80, 90]
x_labels  = ['10', '20', '30', '40', '50', '60', '70', '80', '90']
y_breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
y_labels = ['200', '500', '1000', '2000', '5000', '10k', '20k', '50k', '100k']

(p9.ggplot(data=df_3,
           mapping=p9.aes(x='internet_users', y='gdp',
                          fill='four_regions', size= "income"))
+ p9.geom_point(shape='o', color='black', stroke=.20)
+ p9.scale_size(range=(2,12)) #Keep the scale size 
+ p9.scale_fill_manual(values=four_region_colors)
+ p9.scale_x_continuous(limits=(0, 100), breaks=x_breaks, labels=x_labels)
#Apply a log transformation to reflect the plot across the x-axis. This is to make sure the plot looks like the screenshot 
+ p9.scale_y_continuous(trans='log10',limits=(100, 200000), breaks=y_breaks, labels=y_labels)
+ p9.annotate(geom='text', x=50, y=5000, label='2001', size=90, alpha=0.2, color='gray')
#Add a scale size area to get different sizes of the bubble to be representative of the income size 
+ p9.scale_size_area(max_size=15, guide='legend') 
+ p9.xlab("Individuals using the Internet")
+ p9.ylab("GDP/capita")
)
```

Part 4: Using another geometry(facet wrapping graph)
Facet-wrapped boxplots makes it easier to compare distributions of GDP/capita across regions. There is a boxplot for each of the regions that are not overlapping. It is helpful to show the medians, quartiles, and outliers and this is something the bubble plot does not show completely. It can also be helpful to display the four regions individually so the pattern and data are more clear. The bubble plot is more better when the goal is to help identify the effect and global trends across all countries but it can get more crowded and hard to read.

```{python}
from plotnine import facet_wrap, geom_boxplot

#Define the colors
four_region_colors = {
     "asia": "#ff5872",
    "americas": "#80eb00",
    "europe": "#ffe700",
    "africa": "#05d5e9"
}

#Define the x and y axis labels 
x_breaks  = [10, 20, 30, 40, 50, 60, 70, 80, 90]
x_labels  = ['10', '20', '30', '40', '50', '60', '70', '80', '90']
y_breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
y_labels = ['200', '500', '1000', '2000', '5000', '10k', '20k', '50k', '100k']

(p9.ggplot(data=df_3,
           mapping=p9.aes(x='internet_users', y='income',
                           fill='four_regions'))
+ p9.geom_boxplot()
+ p9.scale_fill_manual(values=four_region_colors)
+ p9.scale_x_continuous(limits=(0, 100), breaks=x_breaks, labels=x_labels)
+ p9.scale_y_continuous(trans='log10',limits=(100, 200000), breaks=y_breaks, labels=y_labels)
+ p9.xlab("Individuals using the Internet")
+ p9.ylab("GDP/capita")
+ facet_wrap('~four_regions', scales='free_y') #Making sure the labels on the y axis show up for all 4 graphs individually
)
```